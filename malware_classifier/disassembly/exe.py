from pefile import PE
from capstone import Cs, CS_ARCH_X86, CS_MODE_64

def instruction_text(instruction):
    """Generate a line of text representing the specified instruction.

    The line of text will be formatted in roughly the following
    manner:

    {Address in hex} {instruction bytes}        {mnemonic}    {opcode string}
    """

    # Address
    # The address is a long value. This means that the hex string
    # constructed for it will have an L at the end of it. On top
    # of that, we want to get rid of the 0x at the beginning of
    # the string.
    address = hex(instruction.address)[2:-1]

    # Byte code
    instruction_bytes = instruction.bytes.rstrip(b'\x00')
    instruction_bytes = [hex(byte)[2:] for byte in instruction_bytes]
    instruction_bytes = ' '.join(instruction_bytes)

    return '{0} {1:17}\t\t\t\t\t     {2:7} {3}'.format(address, instruction_bytes,
                                                       instruction.mnemonic,
                                                       instruction.op_str)

def disassemble_pe(pe_file_path):
    """Generate a string to represent the disassembly for the specified
    portable executable (.exe, .dll, etc.) file.

    The pe_file_path should be a string pointing to a potable executable
    file.
    """

    # Load the disassembler settings.
    mode = Cs(CS_ARCH_X86, CS_MODE_64)

    # Find all of the sections in the portable executable.
    pe = PE(pe_file_path)
    sections = pe.sections

    # Print the instructions for each of the sections in the PE.
    disassembly = ''
    for section in sections:

        # The name of the section is padded with \0 bytes at the
        # end.
        section_name = section.Name.rstrip(b'\x00')

        # Disassemble the code in the section.
        section_code = section.get_data()
        code_address = pe.OPTIONAL_HEADER.ImageBase + section.VirtualAddress

        for instruction in mode.disasm(section_code, code_address):

            # Add a line for the instruction.
            instruction_line = instruction_text(instruction)
            disassembly += '{0}:{1}\n'.format(section_name,
                                              instruction_line)

    return disassembly
