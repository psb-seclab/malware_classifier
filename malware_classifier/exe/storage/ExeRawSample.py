from malware_classifier.exe.storage import ExeSampleBase
from malware_classifier.parsing import memoize

import os
import pefile

###############################################################################

class ExeRawSample(ExeSampleBase):
    """An ExeRawSample represents a sample that retrieves its features from
    a raw Windows Executable (.exe) file.
    """
    
    def __init__(self, file_path):
        """Initialize a new ExeRawSample that retrieves its features from the
        specified Windows Executable (.exe) file.
        """
        
        # Ensure the file exists.
        if (not os.path.exists(file_path)):
            raise ValueError('The file %s could not be found' % file_path)
            
        # NOTE: The file should only be opened when the contents are
        #       absolutely needed. Loading the contents in the constructor
        #       could slow down batch operations.
        self._file_path = file_path
        
        # Use the name of the file without the path or extension as the ID for
        # the sample.
        self._id = os.path.splitext(os.path.basename(file_path))[0]
        
    @memoize
    def pe(self):
        """Gets the PE wrapper object that can be used to parse information
        from the executable.
        """
        return pefile.PE(self._file_path)
        
    def load_hex_view(self):
        
        # Retrieve all of the sections.
        sections = self.pe().sections
        
        # Construct the hex view string using the code in the sections.
        hex_view = b""
        for section in sections:
            
            # Get base address of section
            base_address = self.pe().OPTIONAL_HEADER.ImageBase \
                           + section.VirtualAddress
            
            # Get bytes representing section
            section_data = [b'%02x' % b for b in section.get_data()]
            
            # Break the bytes into lines, with each line containing 16 bytes.
            lines = [b''.join(section_data[i:i+16]) for i 
                     in range(0, len(section_data), 16)]
                     
            # Every line should have the address in front of it. The address
            # should be incremented by 16 for every line.
            lines = [b'%08x%s' % (base_address+(i*16), lines[i]) 
                     for i in range(len(lines))]
                                
            hex_view += b''.join(lines)
            
        return hex_view
            
        