from malware_classifier.exe import ExeSampleBase
from os.path import basename, exists, splitext

###############################################################################

class ExeKaggleSample(ExeSampleBase):
    """ExeKaggleSample represents the samples retrieved from the Microsoft
    Malware Classification Challenge hosted on Kaggle:
    
        https://www.kaggle.com/c/malware-classification
    
    For each sample, a .bytes and .asm file is supplied. The .bytes file
    contains the hex view that is required by the ExeSampleBase, and the .asm
    file contains the disassembled binary (disassembled by IDA). 
    
    The .bytes file contains no header information to ensure the sterility of
    the samples. Any data that would normally be in the header needs to be
    retrieved from the disassembly.
    """
    
    def __init__(self, bytes_file_path):
        """Initialize a sample represented by the specified bytes file."""
        
        # Ensure the file exists.
        if (not exists(bytes_file_path)):
            raise ValueError('The file {0} could not be found'.format(
                                                              bytes_file_path))
                                                              
        # NOTE: The file should only be opened when the contents are
        #       absolutely needed. Loading the contents in the constructor
        #       could slow down batch operations.
        self._bytes_file_path = bytes_file_path
        
        # Use the name of the file without the path or extension as the ID for
        # the sample.
        self._id = splitext(basename(bytes_file_path))[0]
        
    def load_hex_view(self):
        
        # Load the bytes file in.
        with open(self._bytes_file_path, 'rb') as bytes_file:
            return bytes_file.read()
