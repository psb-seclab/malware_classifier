def memoize(function):
    """Decorator that stores the return value of a function for given sets of
    parameters. This decorator is useful if a function is fairly expensive
    and is called frequently with the same parameters.
    """
    
    # Use a dictionary to store all of the return values. The set of arguments
    # are used as keys.
    memoize._return_value_store = {}
    
    def wrapper(*args):
        """Function returned by the memoize decorator. Checks if the set of
        arguments is already saved in the dictionary of return values before
        evaulating the function.
        """
        
        # Check the store for a return value.
        if (args in memoize._return_value_store):
            return memoize._return_value_store[args]
            
        # Evaluate the function and store the result.
        return_value = function(*args)
        memoize._return_value_store[args] = return_value
        
        return return_value
        
    return wrapper
    
###############################################################################

def clear_memoized_values(*args):
    """Clears all memoized values for function calls that used each of the
    specified arguments.
    """
    
    # Iterate through every memoized value.
    args_set = set(args)
    for key in list(memoize._return_value_store.keys()):
        
        # Remove the value if the value's args contained the pass args.
        if (set(key) >= args_set): 
            del memoize._return_value_store[key]
        