from malware_classifier.parsing.exe import *
from time import clock
from os import system, path
import sys

def time(function, *args):
    """Time how long it takes to run the sepcified function.
    
    Any arguments that need to be passed to the function should be specified
    using the args parameter.
    
    Returns the number of seconds the function took to execute.
    """
    
    start = clock()
    function(*args)
    end = clock()
    
    return end - start
    
###############################################################################
    
# Retrieve command line arguments.
if (len(sys.argv) != 2):
    print('\n\tUsage: timer.py [sample name]\n\n')
    sys.exit(1)
    
sample_name = sys.argv[1]
sample_hex_name = '%s.bytes' % sample_name
sample_asm_name = '%s.asm' % sample_name

if not path.isfile(sample_hex_name):
    print('Could not find %s' % sample_hex_name)
    sys.exit(1)
    
if not path.isfile(sample_asm_name):
    print('Could not find %s' % sample_asm_name)
    sys.exit(1)
    
print('%s\n\n' % sample_name)
    
###############################################################################
    
# Test each method for a sample.
hex_sample = ExeHexSample('%s.bytes' % sample_name)

print('---------------Hex---------------\n')

one_gram_time = time(hex_sample.one_gram_features)
print('1-Grams:    %f seconds' % one_gram_time)

metadata_time = time(hex_sample.metadata_features)
print('Metadata:   %f seconds' % metadata_time)

entropy_time = time(hex_sample.entropy_features)
print('Entropy:    %f seconds' % entropy_time)

image_time = time(hex_sample.image_features)
print('Image:      %f seconds' % image_time)

string_time = time(hex_sample.string_features)
print('String:     %f seconds' % string_time)

hex_time = sum([one_gram_time, metadata_time, entropy_time, image_time, 
                string_time])
print('\nTotal:      %f seconds' % hex_time)

print('\n---------------------------------\n')

###############################################################################

asm_sample = ExeAsmSample('%s.asm' % sample_name)

print('---------------Asm---------------\n')

metadata_time = time(asm_sample.metadata_features)
print('Metadata:   %f seconds' % metadata_time)

symbol_time = time(asm_sample.symbol_features)
print('Symbol:     %f seconds' % symbol_time)

opcode_time = time(asm_sample.opcode_features)
print('Opcode:     %f seconds' % opcode_time)

register_time = time(asm_sample.register_features)
print('Register:   %f seconds' % register_time)

api_time = time(asm_sample.api_features)
print('API:        %f seconds' % api_time)

section_time = time(asm_sample.section_features)
print('Section:    %f seconds' % section_time)

dp_time = time(asm_sample.data_define_features)
print('DP:         %f seconds' % dp_time)

misc_time = time(asm_sample.misc_features)
print('Misc:       %f seconds' % misc_time)

asm_time = sum([metadata_time, symbol_time, opcode_time, register_time,
                api_time, section_time, dp_time, misc_time])
print('\nTotal:      %f seconds' % asm_time)

print('\n---------------------------------\n')

###############################################################################

total_time = hex_time + asm_time
print('Total:      %f seconds\n' % total_time)

###############################################################################

system('pause')

print('\n\n')

###############################################################################

hex_sample = ExeHexSample('%s.bytes' % sample_name)

print('---------------Hex---------------\n')

hex_time = time(hex_sample.features)
print('All:        %f seconds' % hex_time)

print('\n---------------------------------\n')

###############################################################################

asm_sample = ExeAsmSample('%s.asm' % sample_name)

print('---------------Asm---------------\n')

asm_time = time(asm_sample.features)
print('All:        %f seconds' % asm_time)

###############################################################################

print('\n---------------------------------\n')

total_time = hex_time + asm_time
print('Total:      %f seconds' % total_time)

###############################################################################

print('\n\n')

system('pause')

###############################################################################

# Get sizes of files in kB
hex_file_kb = path.getsize(sample_hex_name) / 1024
asm_file_kb = path.getsize(sample_asm_name) / 1204

total_size_kb = hex_file_kb + asm_file_kb

# Calculate number of seconds per kB for hex and asm.
hex_time_kb = hex_time / hex_file_kb
asm_time_kb = asm_time / asm_file_kb

# Estimate the asm and hex sizes of the full data set based on the ratio of
# the given samples.
full_size_kb = 500 * 1024 * 1024

hex_ratio = hex_file_kb / total_size_kb
asm_ratio = asm_file_kb / total_size_kb

full_size_hex = full_size_kb * hex_ratio
full_size_asm = full_size_kb * asm_ratio

# Estimate the time for full parsing of hex and asm files
full_time_hex = hex_time_kb * full_size_hex / 60 / 60   # Hours
full_time_asm = asm_time_kb * full_size_asm / 60 / 60   # Hours

full_time = full_time_hex + full_time_asm   # Hours

# Print stats
print('\nHex Seconds per kB:           %f sec/kB' % hex_time_kb)
print('Asm Seconds per kB:           %f sec/kB' % asm_time_kb)

print('\nEstimated Hex parse time:     %f hours' % full_time_hex)
print('Estimated Asm parse time:     %f hours' % full_time_asm)

print('\nEstimated Total parse time:   %f hours\n' % full_time)

