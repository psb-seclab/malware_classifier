from inspect import getfile
from malware_classifier.parsing.exe import ExeAsmSample, ExeHexSample
from os.path import dirname, join
from tests import TestCase

import unittest

###############################################################################

class ExeAsmTestCase(TestCase):
    """Base class for all test cases involving the Windows Executable
    Assembly view features.
    """
    
    def setUp(self):
        """Load the test assembly file and set the results directory.
        
        This is called before the test method is executed.
        """
        
        directory = join(dirname(getfile(ExeAsmTestCase)), 
                         'Test Files/Exe Asm Parser')
                
        # Load test assembly file.
        self.sample = ExeAsmSample(join(directory, 'test.asm'))
        
        # Set results directory.
        self.results_directory = join(directory, 'Expected Results')
                                 
class ExeHexTestCase(TestCase):
    """Base class for all test cases involving the Windows Executable
    Hex view features.
    """
    
    def setUp(self):
        """Load the test assembly file and set the results directory.
        
        This is called before the test method is executed.
        """
        
        directory = join(dirname(getfile(ExeAsmTestCase)), 
                         'Test Files/Exe Hex Parser')
                
        # Load test hex file.
        self.sample = ExeHexSample(join(directory, 'test.bytes'))
        
        # Set results directory.
        self.results_directory = join(directory, 'Expected Results')
                                 
###############################################################################
                                 
class TestExeAsmMetadata(ExeAsmTestCase):
    """Tests the metadata_features method."""
    
    def test_metadata_features(self):
        self.compare_list(self.sample.metadata_features(), 
                          'metadata_features.txt')
                         
class TestExeAsmOpcodes(ExeAsmTestCase):
    """Tests the registers_opcodes method."""
    
    def test_opcodes_features(self):
        self.compare_list(self.sample.opcode_features(), 
                          'opcode_features.txt')

class TestExeAsmRegisters(ExeAsmTestCase):
    """Tests the registers_features method."""
    
    def test_registers_features(self):
        self.compare_list(self.sample.register_features(), 
                         'register_features.txt')
                              
class TestExeAsmSymbols(ExeAsmTestCase):
    """Test the symbol features method."""
    
    def test_symbol_features(self):
        self.compare_list(self.sample.symbol_features(), 
                         'symbol_features.txt')
        
class TestExeAsmSections(ExeAsmTestCase):
    """Test the section features method."""
    
    def test_section_features(self):
        self.compare_list(self.sample.section_features(), 
                         'section_features.txt')
                         
class TestExeAsmDataDefine(ExeAsmTestCase):
    """Test the data define features method."""
    
    def test_data_define_features(self):
        self.compare_list(self.sample.data_define_features(), 
                         'datadefine_features.txt')
                         
class TestExeAsmApi(ExeAsmTestCase):
    """Test the api features method."""

    def test_api_features(self):
        self.compare_list(self.sample.api_features(), 
                         'api_features.txt')     
                    
class TestExeAsmMisc(ExeAsmTestCase):
    """Test the misc features method."""

    def test_api_features(self):
        self.compare_list(self.sample.misc_features(), 
                         'misc_features.txt')
                         
class TestExeAsmFeatures(ExeAsmTestCase):
    """Test all asm features."""
    
    @unittest.skip
    def test_features(self):
        self.compare_list(self.sample.features(),
                          'features.txt')
            
###############################################################################

class TestExeHexEntropy(ExeHexTestCase):
    """Tests the entropies for the hex parser."""
    
    def test_entropies(self):
        self.compare_list(self.sample.entropy_features(50),
                          'entropies.txt')
                         
class TestExeHexMetadata(ExeHexTestCase):
    """Tests the metadata features for the hex parser."""
    
    def test_metadata_features(self):
        self.compare_list(self.sample.metadata_features(),
                         'metadata_features.txt')
                         
class TestExeHexOneGram(ExeHexTestCase):
    """Tests the 1-gram features for the hex parser."""

    def test_one_gram_features(self):
        self.compare_list(self.sample.one_gram_features(),
                         '1gram_features.txt')
                         
class TestExeHexString(ExeHexTestCase):
    """Tests the string features for the hex parser."""

    def test_string_features(self):
        self.compare_list(self.sample.string_features(),
                         'string_features.txt')
                         
class TestExeHexImage(ExeHexTestCase):
    """Tests the image features for the hex parser."""

    def test_string_features(self):
        self.compare_list(self.sample.image_features(),
                         'image_features.txt')
                         
###############################################################################

if __name__ == '__main__':
    unittest().main()