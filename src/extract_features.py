import os
from parsers import ExeAsmSample, ExeHexSample
import sqlite3

fL = ['md5_Hash', 'family', 'ng', 'md1', 'entropy', 'imgR', 'lenStr',
               'md2', 'sym', 'opC', 'reg', 'api', 'sec', 'dd', 'msic']

def get_sample_names(directory):
    """Return all of the samples in the specified directory.
    
    A sample is considered in the directory if there exists both a .bytes file
    and a .asm file with the sample's name.
    
    The list returned will contain only the names of all of the samples. The
    names will not contain file extensions or the directory.
    
    The list will be sorted alphabetically.
    """
    
    # Retrieve all of the files in the directory.
    files = set(os.listdir(directory))
    
    # Each sample should have 1) a .bytes file and 2) a .asm file. Both files
    # should have the same name minus the extension. This name should be the md5
    # hash that is used to uniquely identify the file. In order to retrieve all
    # of the potential hashes in the directory, we can remove all of the file
    # extensions and filter out duplicate names.
    names = set(os.path.splitext(file)[0] for file in files)
    
    # Ensure each unique name has both an associated .bytes and associated
    # .asm file.
    names = list(name for name in names if ('%s.bytes' % name) in files 
                                        and ('%s.asm' % name) in files)
    
    # Sort the names alphabetically.
    names.sort()
    
    return names
    
def open_sample_database(database_name):
    """Returns connection to the specified database.
    
    The database will be guaranteed to have a table called 'Samples'. That
    means that if the database does not already contain this table, it will
    be created in the opened database.
    
    If the database pointed to by the path does not exist, it will be created.
    """
    
    # Create a connection to the database. This will create the database file
    # if it doesn't already exist.
    connection = sqlite3.connect(database_name)
    
    # Create the Samples table if it doesn't already exist.
    cursor = connection.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS Samples
                      (
                          {0} text, 
                          {1} int, 
                          {2} text,
                          {3} text,
                          {4} text,
                          {5} text,
                          {6} text,
                          {7} text,
                          {8} text,
                          {9} text,
                          {10} text,
                          {11} text,
                          {12} text,
                          {13} text,
                          {14} text
                      )'''.format((*fL)))

# Ensure the user input a directory.
if (len(os.sys.argv) != 2):
    print('''\n\tUsage: extract_features.py [Sample Directory]\n''')
    os.sys.exit(1)
    
directory = os.sys.argv[1]
    
# Ensure the directory exists.
if (not os.path.isdir(directory)):
    print('''\n\tCould not find the directory: %s\n''' % directory)
    os.sys.exit(1)
    
# Retrieve the names of all of the samples in the directory.
names = get_sample_names(directory)

print(names)