from math import log

def create_image_array(filebytes):
    # Initiate the list that will be used for the image features
    imgarray=[]

    # Split the file and put inside the list
    for row in filebytes:
        lines = row.split()
        if len(lines)!=17:
            continue
        imgarray.append([int(i,16) if i!='??' else 0 for i in lines[1:] ])
        
    # Turn the list into an array
    imgarray = np.array(imgarray)
    
    assert(imgarray.shape[1]==16)
    # Cast the array's dimensions to an int
    b = int((imgarray.shape[0]*16)**(0.5))
    b = 2**(int(log(b)/log(2))+1)
    
    # Take the shape of the array and divide it by b
    a=int(imgarray.shape[0]*16/b)
    
    imgarray=imgarray[:a*b//16,:]
    imgarray=np.reshape(imgarray,(a,b))
    
    return imgarray
    
import mahotas

def lbparray(filebytes):
    
    # Call function to create array
    img = create_image_array(filebytes)
    
    # Find the 13 Local Binary Pattern features from the array
    lbppoints = mahotas.features.lbp(img,10,10,ignore_zeros=False)
    
    # Return feature list
    return lbppoints.tolist()
    
def haralick(filebytes):
    # Initialize initial array
    img_feat = []

    # Load file into function
    img = create_image_array(filebytes)
    
    # Run Haralick features analysis
    features = mahotas.features.haralick(img)
    
    # Pull features from features array
    for i in range(len(features)):
        for j in range(len(features[1])):
            img_feat.append(features[i][j])
    return img_feat
    
# Read in file arguments.
import numpy as np

# Open file to read
input_file_name = open('0A32eTdBKayjCWhZqDOQ.bytes')

# Local Binary Patterns array
lbparray = lbparray(input_file_name)

# Put pointer back to the start of the file to read
input_file_name.seek(0)

# Haralick Patterns array
haralickarray = haralick(input_file_name)

input_file_name.close()