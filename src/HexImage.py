def grayscale_pixel(hex_digit):
    gray_value = int(hex_digit, 16) * 16 + 15
    return (gray_value, gray_value, gray_value)
    
from math import log

def byte_make_image(byte_code):
    img_array=[]
    for row in byte_code:
        xx=row.split()
        if len(xx)!=17:
            continue
        img_array.append([int(i,16) if i!='??' else 0 for i in xx[1:] ])
    img_array = np.array(img_array)
    if img_array.shape[1]!=16:
        assert(False)
    b=int((img_array.shape[0]*16)**(0.5))
    b=2**(int(log(b)/log(2))+1)
    a=int(img_array.shape[0]*16/b)
    img_array=img_array[:a*b/16,:]
    img_array=np.reshape(img_array,(a,b))
    #img_array = np.uint8(img_array)
    #im = Image.fromarray(img_array)
    return img_array
    
import mahotas

def byte_image2(byte_code):
    img = byte_make_image(byte_code)
    spoints = mahotas.features.lbp(img,10,10,ignore_zeros=False)
    return spoints.tolist()
    
# Read in file arguments.
from os import sys
import numpy as np
from PIL import Image
from math import sqrt
import mahotas

input_file_name = open('0A32eTdBKayjCWhZqDOQ.bytes')
name = '0A32eTdBKayjCWhZqDOQ.bytes'



## Open input file.
#try:
#    file = open(input_file_name)
#    
#except IOError:
#    print("The file %s does not exist." % fileName)
#    sys.exit(1)
#
## Retrieve all of the hex digits from the file.
#contents = file.read()
#
#contents = contents.replace("?", "")    # Besides regular hex values, the file also
#                                        # contains '?' characters. These are of no use.
#
#contents = "".join(contents.split())    # The file contains whitespace. This can be removed by splitting
#                                        # on whitespace characters and joining all of the pieces back
#                                        # together.
#
## Makes a list of greyscale_pixels
#pixelspng = [grayscale_pixel(digit) for digit in contents]
#
## Turns pixelspng into an array using numpy
#pixels = np.array(pixelspng)
#
## Define how many columns we want int the array to be analyzed for its feautres
#columns = 1500
#
## Defines the amount of rows we will need in our array to be analyzed
#excess = len(pixels) % columns
#
## Creates 2darray defined with size (excess, columns)
#twodarray = pixels[:-excess].reshape((-1,columns))
#
## Construct an image with the pixels.
#size = int(sqrt(len(pixelspng)))           # The size is kept at a 1 : 1 aspect ratio for now. We may want
#image = Image.new('RGB', (size, size))  # to consider making a fixed width.
#image.putdata(pixelspng[:size*size])

img = byte_image2(input_file_name)

print(img)

# Save the image to a png file.
#image.save('%s.png' % input_file_name)

#features = mahotas.features.haralick(twodarray)

#lbppoints = mahotas.features.lbp(pixelspng,10,10,ignore_zeros=False)
