from os.path import getsize
from math import log
import numpy as np
from time import clock

def entropy(counts, window_size):
    """Retrieve the entropy for a window with the specified counts and window
    sizes.
    
    The counts should be a list of the counts for each of the distinct items
    in the window.
    
    The return value will be between 0 (order) and 8(randomness).
    """
    
    entropies = [count / window_size * log(count / window_size, 2) for count 
                 in counts if count > 0]
    
    return -sum(entropies)
    
class ExeSample(object):
    """An ExeSample represents a malware sample.
    
    Every malware sample must contain a hexadecimal dump. With that provided,
    the sample can be analyzed and have various features extracted from it.
    """
    
    def __init__(self, hex_file_name):
        """Initialize a new ExeSample whose hex dump can be found in the file
        pointed to by hex_file_name.
        """
        
        self.hex_file_name = hex_file_name
        
        # Ensure the hex file is valid.
        try:
            with open(hex_file_name, "rb") as file:
                # Store the contents of the file for parsing.
                self._hex_contents = file.read()
            
        except IOError:
            raise ValueError('Invalid file name: %s' % hex_file_name)
            
    def asm_api(self):
        """Retrieve the frequency of the top 794 most frequent APIs used in 
        malicious files in list form.
        
        Each element of this list will show how many of each API is used.
        
        Files containing no APIs are highly suspicious.
        """
        
        api_list = ["GetProcAddress", "LoadLibraryA", "GetModuleHandleA", 
                    "ExitProcess", "VirtualAlloc", "WriteFile", 
                    "GetModuleFileNameA", "CloseHandle", "RegCloseKey", 
                    "VirtualFree", "GetLastError", "Sleep", "CreateFileA", 
                    "FreeLibrary", "GetCommandLineA", "MultiByteToWideChar", 
                    "ReadFile", "SetFilePointer", "RegQueryValueExA", 
                    "GetCurrentThreadId", "GetTickCount", "GetStdHandle", 
                    "MessageBoxA", "GetStartupInfoA", "RegOpenKeyExA", 
                    "GetCurrentProcess", "EnterCriticalSection", 
                    "LeaveCriticalSection", "WideCharToMultiByte", 
                    "DeleteCriticalSection", "VirtualProtect", 
                    "InitializeCriticalSection", "LocalAlloc", "FindClose", 
                    "CreateThread", "RtlUnwind", "lstrlenA", "GetDC", 
                    "UnhandledExceptionFilter", "WaitForSingleObject", 
                    "GetLocaleInfoA", "GetFileSize", "FindFirstFileA", 
                    "GetACP", "DeleteFileA", "GetVersionExA", "GetVersion", 
                    "GetCurrentProcessId", "TlsSetValue", "TlsGetValue", 
                    "RaiseException", "TerminateProcess", "CharNextA", 
                    "HeapAlloc", "LocalFree", "GetCPInfo", "GetFileType", 
                    "GlobalAlloc", "HeapFree", "VirtualQuery", 
                    "DispatchMessageA", "ShowWindow", "SetEndOfFile", 
                    "RegSetValueExA", "DestroyWindow", "CreateWindowExA", 
                    "GetSystemMetrics", "GlobalFree", "InterlockedIncrement", 
                    "InterlockedDecrement", "LoadStringA", "GetThreadLocale", 
                    "SendMessageA", "DeleteObject", "GetTempPathA", 
                    "GetClientRect SelectObject", "GetWindowRect", "wsprintfA",
                    "SetLastError", "QueryPerformanceCounter", 
                    "GetSystemDirectoryA", "DefWindowProcA", "GlobalLock", 
                    "GlobalUnlock", "TranslateMessage", "ShellExecuteA", 
                    "HeapReAlloc", "GetDeviceCaps", "SetTimer", "LoadCursorA", 
                    "CreateProcessA", "IsWindow", "RegCreateKeyExA", 
                    "SetWindowLongA", "EnableWindow", "GetWindowsDirectoryA", 
                    "HeapCreate", "PostQuitMessage", "SetWindowPos", 
                    "LoadResource", "GetFileAttributesA", "PeekMessageA", 
                    "lstrcpynA", "GetOEMCP", "BeginPaint", "EndPaint", 
                    "SetErrorMode", "SysFreeString", "GetStringTypeW", 
                    "lstrcpyA", "SizeofResource", "CallWindowProcA", 
                    "IsWindowVisible", "SetUnhandledExceptionFilter", 
                    "LoadLibraryExA", "GetWindowLongA", "LCMapStringW", 
                    "LCMapStringA", "SetHandleCount", "SetForegroundWindow", 
                    "GetStringTypeA", "GetProcessHeap", 
                    "GetEnvironmentStringsW", "GetSysColor", "RegisterClassA", 
                    "CreateDirectoryA", "LockResource", 
                    "FreeEnvironmentStringsA", "InvalidateRect", 
                    "FreeEnvironmentStringsW", "InterlockedExchange", 
                    "FindResourceA", "SetTextColor", "TlsAlloc", 
                    "GetEnvironmentStrings", "GetSystemTimeAsFileTime", 
                    "BitBlt", "SetCursor", "VerQueryValueA", "HeapDestroy", 
                    "lstrcatA", "CompareStringA", "ReleaseDC", 
                    "GetFullPathNameA", "CoCreateInstance", "MulDiv", 
                    "GetWindowTextA", "CopyFileA", "FindNextFileA", 
                    "lstrcmpiA", "CreateEventA", "FillRect", "DeleteDC", 
                    "SetEvent", "GetDesktopWindow", "SetBkColor", 
                    "GetDlgItem", "SetFileAttributesA", "IsWindowEnabled", 
                    "SetWindowTextA", "SetBkMode", "ScreenToClient", 
                    "GetSystemInfo", "TlsFree", "DrawTextA", "GetKeyboardType",
                    "SystemParametersInfoA", "CreateCompatibleDC", 
                    "GetParent", "EnableMenuItem", "PostMessageA", 
                    "GetDiskFreeSpaceA", "LoadIconA", "UpdateWindow", 
                    "GetWindowThreadProcessId", "GetLocalTime", "lstrcmpA", 
                    "GetStockObject", "LoadBitmapA", "GetWindow", 
                    "FormatMessageA", "__vbaExceptHandler", "CoInitialize", 
                    "RegDeleteKeyA", "CreateFontIndirectA", "CreateMutexA", 
                    "GetClassInfoA", "SetFocus", "CreateCompatibleBitmap", 
                    "CoTaskMemFree", "_initterm", "EndDialog", "KillTimer", 
                    "CreatePopupMenu", "RegDeleteValueA", 
                    "GetForegroundWindow", "FlushFileBuffers", 
                    "TrackPopupMenu", "GetSystemMenu", "FindWindowA", 
                    "OpenProcess", "HeapSize", "GetExitCodeProcess", 
                    "GetClassNameA", "DllFunctionCall", "GetCursorPos", 
                    "EVENT_SINK_Release", "EVENT_SINK_QueryInterface", 
                    "GetPrivateProfileStringA", "EVENT_SINK_AddRef", 
                    "_adjust_fdiv", "CallNextHookEx", "GetMessageA", 
                    "ImageList_Destroy", "SetFileTime", "GetObjectA", 
                    "GetFocus", "GetFileVersionInfoA", "ImageList_Create", 
                    "SaveDC", "UnhookWindowsHookEx", "SetStdHandle", 
                    "RemoveDirectoryA", "MoveFileA", "GetFileVersionInfoSizeA",
                    "IsIconic", "CreateBrushIndirect", "EnumWindows", 
                    "SetWindowsHookExA", "CreateSolidBrush", "exit", 
                    "WritePrivateProfileStringA", "free", 
                    "FileTimeToLocalFileTime", "InternetOpenA", 
                    "OpenProcessToken", "OleInitialize", "GetKeyState", 
                    "SetCurrentDirectoryA", "GetModuleHandleW", 
                    "OpenClipboard", "GetActiveWindow", "CloseClipboard", 
                    "ClientToScreen", "SetClassLongA", "ExitWindowsEx", 
                    "UnregisterClassA", "FreeResource", 
                    "RegisterWindowMessageA", "GetShortPathNameA", 
                    "ResetEvent", "_except_handler", "malloc", 
                    "OleUninitialize", "GetSubMenu", "MapWindowPoints", 
                    "GetMenu", "GetTempFileNameA", "RegEnumValueA", 
                    "EmptyClipboard", "GetDIBits", "SetCapture", "PtInRect", 
                    "SetClipboardData", "InternetCloseHandle", "DestroyMenu", 
                    "FindWindowExA", "ReleaseCapture", "VariantClear", 
                    "GetSystemTime", "CheckMenuItem", "ResumeThread", 
                    "GetMessagePos", "SetRect", "CoUninitialize", 
                    "GetModuleFileNameW", "GetCurrentThread", 
                    "IsDebuggerPresent", "InternetReadFile", "SetActiveWindow",
                    "GetWindowDC", "SysAllocStringLen", "OffsetRect", 
                    "DestroyIcon", "GetMenuItemCount", "DialogBoxParamA", 
                    "DrawIcon", "CreateBitmap", "VariantCopy", 
                    "GetWindowPlacement", "GetCapture", "memset", "lstrlenW", 
                    "RestoreDC", "IsChild", "GetEnvironmentVariableA", 
                    "AdjustWindowRectEx", "ExitThread", "GetMenuState",
                    "SelectPalette", "IsBadReadPtr", "GlobalDeleteAtom", 
                    "ImageList_Add", "GetLastActivePopup", "GetTopWindow", 
                    "__set_app_type", "GetDateFormatA", "SysReAllocStringLen", 
                    "CreateFileW", "RealizePalette", "GetMenuItemID", 
                    "InflateRect", "SafeArrayPtrOfIndex", "_CIcos", 
                    "GlobalReAlloc", "PatBlt", "SetViewportOrgEx", 
                    "UnrealizeObject", "GetPixel", "SetPropA", "_allmul", 
                    "LineTo", "SetDlgItemTextA", "GlobalHandle", "memcpy", 
                    "GetClipBox", "IsDialogMessageA", "SetMenu", "WinExec", 
                    "_CIsqrt", "GetCurrentDirectoryA", "IntersectRect", 
                    "GlobalAddAtomA", "_CIsin", "MapViewOfFile", "StretchBlt", 
                    "_CIlog", "__p__fmode", "_CIexp", "_CIatan", "_adj_fdiv_m",
                    "_CItan", "_adj_fdiv_m", "_adj_fprem", "_adj_fptan", 
                    "_adj_fprem", "_adj_fdiv_r", "_adj_fdivr_mi", 
                    "_adj_fpatan", "_adj_fdivr_m", "GetPropA", "_adj_fdivr_m", 
                    "_adj_fdiv_mi", "_adj_fdivr_mi", "RegEnumKeyA", 
                    "__vbaFPException", "_adj_fdiv_mi", "__vbaChkstk", 
                    "CompareStringW", "GetTimeZoneInformation", 
                    "AdjustTokenPrivileges", "__vbaFreeVar", "RectVisible", 
                    "__getmainargs", "sprintf", "SHGetSpecialFolderLocation", 
                    "RedrawWindow", "__vbaFreeStr", "__vbaHresultCheckObj", 
                    "WindowFromPoint", "EnumCalendarInfoA", "RemovePropA", 
                    "__vbaStrMove", "EqualRect", "_XcptFilter", 
                    "__vbaFreeVarList", "ExpandEnvironmentStringsA", 
                    "__vbaFreeStrList", "GetSysColorBrush", 
                    "ImageList_SetIconSize", "LoadImageA", "GetComputerNameA", 
                    "UnmapViewOfFile", "CreateDIBSection", "MoveToEx", 
                    "__setusermatherr", "__vbaNew", "_exit", 
                    "SetEnvironmentVariableA", "DrawEdge", "__vbaStrCat", 
                    "__p__commode", "__vbaStrCopy", "IsRectEmpty", 
                    "__vbaFreeObj", "SetStretchBltMode", "_onexit", 
                    "IsZoomed", "GetIconInfo", "CreatePalette", 
                    "CharLowerA", "SHGetPathFromIDListA", "GlobalFindAtomA", 
                    "RegOpenKeyA", "CreateDIBitmap", "GetKeyboardState", 
                    "LookupPrivilegeValueA", "_controlfp", "strstr", 
                    "GetDlgItemTextA", "__vbaStrVarMove","__vbaSetSystemError",
                    "DeleteMenu", "LoadLibraryW", "IsValidCodePage", 
                    "CharPrevA", "GetTextExtentPointA", 
                    "CreateToolhelpSnapshot", "CharToOemA", "DestroyCursor", 
                    "RegisterClipboardFormatA", "__vbaOnError", 
                    "GetStringTypeExA", "CreateMenu", "DrawIconEx", 
                    "EnumThreadWindows", "SetWindowOrgEx", "DrawMenuBar", 
                    "GetDriveTypeA", "WinHelpA", "SetScrollPos", 
                    "SHFileOperationA", "VariantInit", "FrameRect", 
                    "__vbaLenBstr", "ShowOwnedPopups", "__vbaVarDup", 
                    "__dllonexit", "SHGetFileInfoA", "atoi", "GetScrollPos", 
                    "AppendMenuA", "SetPixel", "__vbaVarMove", 
                    "ExcludeClipRect", "strncpy", "SetROP", "GetTextMetricsA", 
                    "GetDCEx", "CreateDialogParamA", "DrawFrameControl", 
                    "SetWindowPlacement", "__CxxFrameHandler", 
                    "\?\?\@YAPAXI\@Z", "MapVirtualKeyA", "__vbaErrorOverflow", 
                    "OemToCharA", "WaitMessage", "InternetOpenUrlA", 
                    "GetKeyboardLayout", "FileTimeToDosDateTime", "RemoveMenu",
                    "SafeArrayCreate", "__vbaAryDestruct", "SetScrollRange", 
                    "GetVolumeInformationA", "__vbaStrCmp", 
                    "FileTimeToSystemTime", "ImageList_Remove", "ScrollWindow",
                    "SetScrollInfo", "RegEnumKeyExA", "GetCursor", 
                    "IntersectClipRect", "GetScrollRange", "GetClipboardData", 
                    "GetSystemPaletteEntries", "SafeArrayGetUBound", 
                    "CheckDlgButton", "CompareFileTime", "GetMenuItemInfoA", 
                    "CreateIcon", "SetThreadLocale", "InsertMenuItemA", 
                    "CreateFileMappingA", "SafeArrayGetLBound", 
                    "ImageList_Draw", "InsertMenuA", "ProcessNext", 
                    "SHBrowseForFolderA", "ReleaseMutex", "__vbaStrToAnsi", 
                    "WriteProcessMemory", "SetBrushOrgEx", "ShowScrollBar", 
                    "SendMessageTimeoutA", "ProcessFirst", "__vbaFileOpen", 
                    "MsgWaitForMultipleObjects", "GetScrollInfo", 
                    "GetBitmapBits", "__vbaFileClose", "strlen", 
                    "GetPaletteEntries", "ImageList_DragEnter", "MessageBeep", 
                    "TranslateMDISysAccel", "ActivateKeyboardLayout", 
                    "GetWindowOrgEx", "__vbaObjSet", "GetMenuStringA", 
                    "CreateHalftonePalette", "GetFileTime", "GetDIBColorTable",
                    "ImageList_EndDrag", "ImageList_GetIconSize", 
                    "GetCurrentPositionEx", "SetDIBColorTable", "__vbaVarCat", 
                    "ImageList_DragLeave", "CloseServiceHandle", 
                    "ImageList_SetBkColor", "RegFlushKey", "EnableScrollBar", 
                    "ImageList_DragMove", "_acmdln", "ImageList_DrawEx", 
                    "SetParent", "__vbaStrVarVal", "ImageList_GetImageCount", 
                    "ImageList_BeginDrag", "SearchPathA", "GetKeyNameTextA", 
                    "ImageList_DragShowNolock", "ImageList_Read", 
                    "GetKeyboardLayoutList", "MoveWindow", "RegOpenKeyExW", 
                    "__vbaStrToUnicode", "GetConsoleCP", "CreatePenIndirect", 
                    "RegQueryValueExW", "RegQueryInfoKeyA", "DefFrameProcA", 
                    "GetBrushOrgEx", "ImageList_ReplaceIcon", 
                    "GetUserDefaultLCID", "__vbaGenerateBoundsError", 
                    "strchr", "GetConsoleMode", "__vbaEnd","SetThreadPriority",
                    "GetCommandLineW", "DefMDIChildProcA", "_stricmp", 
                    "__vbaIVar", "SetMenuItemInfoA", "ImageList_GetBkColor", 
                    "ImageList_AddMasked", "ImageList_Write", "MaskBlt", 
                    "GetDCOrgEx", "CharLowerBuffA", "RegisterClassExA", 
                    "ShowCursor", "VariantChangeTypeEx", "SetMapMode", 
                    "IsBadWritePtr", "DuplicateHandle", "URLDownloadToFileA", 
                    "InitCommonControls", "GetConsoleOutputCP", "strcpy", 
                    "WriteConsoleW", "ImageList_GetDragImage", 
                    "VariantChangeType", "Rectangle", "LoadKeyboardLayoutA", 
                    "WriteConsoleA", "__vbaFreeObjList", "__vbaUbound", 
                    "CoTaskMemAlloc", "strrchr", "GetExitCodeThread", 
                    "FindFirstFileW", "__vbaAryMove", "ProcCallEngine", 
                    "__vbaAryUnlock", "__vbaRedim", "TerminateThread", 
                    "OpenSCManagerA", "CopyRect", "CreateStreamOnHGlobal", 
                    "WSACleanup", "ImageList_SetDragCursorImage", "__vbaInStr",
                    "MessageBoxW", "fclose", "OpenServiceA", "CharUpperBuffA", 
                    "\?\?\@YAXPAX\@Z", "InitializeCriticalSectionAndSpinCount",
                    "rand", "MethCallEngine", "__vbaII","SystemTimeToFileTime",
                    "__vbaAryLock", "GetFileAttributesW", "ReadProcessMemory", 
                    "__vbaFpI", "strcat", "RegSetValueExW", "GetLocaleInfoW", 
                    "__vbaVarVec", "VirtualAllocEx", "DeleteFileW", 
                    "GetMessageTime", "SendMessageW", "__vbaVarTstEq", 
                    "PostThreadMessageA", "CLSIDFromString", "fopen", 
                    "InterlockedCompareExchange", "RegCreateKeyA", 
                    "OutputDebugStringA", "strcmp", "MessageBoxIndirectA", 
                    "StartServiceA", "PlayEnhMetaFile", "SHGetMalloc", 
                    "DeleteEnhMetaFile", "SendDlgItemMessageA", "CharUpperA", 
                    "__vbaAryConstruct", "GetEnhMetaFileHeader", "__vbaVarAdd",
                    "SetEnhMetaFileBits", "__vbaObjSetAddref", 
                    "GetEnhMetaFileBits", "LoadStringW", "SetWinMetaFileBits", 
                    "GetWinMetaFileBits", "__vbaVarVargNofree", "ExtTextOutA",
                    "GetEnhMetaFilePaletteEntries", "IsBadCodePtr", 
                    "OpenMutexA", "__vbaStrI", "__vbaVarCopy", 
                    "CopyEnhMetaFileA", "LocalReAlloc", "srand","__vbaAryCopy",
                    "CreateDCA", "wcslen", "__vbaUII", "send", "MoveFileExA", 
                    "VariantCopyInd", "__vbaStrI", "DispatchMessageW", 
                    "WaitForMultipleObjects", "CoGetClassObject","IsEqualGUID",
                    "GetUserNameA", "GetWindowTextLengthA", "__vbaErase", 
                    "WSAStartup", "RegCreateKeyExW", "__vbaVarSub", 
                    "GetOpenFileNameA", "VirtualProtectEx", "IsDBCSLeadByte", 
                    "SetWindowLongW", "time", "wvsprintfA", "\*invalid\*", 
                    "GetDlgCtrlID", "__vbaLsetFixstr", "CreateWindowExW", 
                    "__vbaAryVar", "__vbaExitProc", "__vbaFixstrConstruct", 
                    "TextOutA", "CreateDirectoryW", "SuspendThread", 
                    "DeviceIoControl", "GetWindowLongW", "GlobalSize", 
                    "DefWindowProcW", "DrawFocusRect", "gethostbyname", 
                    "GetErrorInfo", "_strlwr", "HttpQueryInfoA", "__vbaIVar", 
                    "strncmp", "PostMessageW", "LocalFileTimeToFileTime", 
                    "InternetConnectA", "_cexit", "SHGetSpecialFolderPathA", 
                    "htons", "SetCursorPos", "DeleteService", "CharNextW", 
                    "FindResourceW", "__vbaRedimPreserve", "ValidateRect", 
                    "__vbaBoolVarNull", "GetClassLongA", "LPtoDP", 
                    "PeekMessageW", "__vbaPutOwner", "socket", "closesocket", 
                    "CreateEventW", "memmove", "lstrcmpW", "ClosePrinter", 
                    "GetVersionExW", "Netbios", "CreateServiceA", 
                    "StringFromCLSID", "CLSIDFromProgID", "GlobalMemoryStatus",
                    "EnumChildWindows", "OpenPrinterA", "ControlService", 
                    "IsValidLocale", "LoadLibraryExW", "GetTimeFormatA", 
                    "Shell_NotifyIconA", "connect", "lstrcpyW", 
                    "DisableThreadLibraryCalls", "__vbaStrVarCopy", 
                    "__vbaInStrVar", "wcscmp", "SetViewportExtEx", 
                    "SetWindowExtEx", "InitCommonControlsEx", "lstrcmpiW", 
                    "__vbaVarTstNe", "wcscpy", "ShellExecuteExA", 
                    "HttpOpenRequestA", "RegQueryValueA", "HttpSendRequestA", 
                    "fwrite", "__vbaGet", "recv", "FormatMessageW", 
                    "GetStartupInfoW", "__vbaVarZero", "GlobalGetAtomNameA", 
                    "__vbaIErrVar", "FindNextFileW", "BringWindowToTop", 
                    "FreeSid", "CreateRectRgn", "wsprintfW", "__vbaStrFixstr", 
                    "GetUserDefaultLangID", "TranslateAcceleratorA", 
                    "CreateProcessW", "Escape", "__vbaVarIndexLoad", 
                    "RegDeleteValueW", "Polyline", "SetWindowTextW", 
                    "LoadCursorW", "inet_addr", "CreateRemoteThread", 
                    "GetThreadContext", "InternetGetConnectedState", 
                    "GetTextExtentPointA", "UnlockFile", "ShellExecuteW", 
                    "GetSaveFileNameA", "GetFileTitleA", "EnumSystemLocalesA", 
                    "GetTempPathW", "GetTokenInformation", "VerQueryValueW", 
                    "CreatePipe", "GdiFlush", "GetWindowTextW", 
                    "__vbaRecAnsiToUni", "__vbaRecUniToAnsi", "LockFile", 
                    "keybd_event", "SetServiceStatus"]
        
        lines = self._hex_contents.split(b'\n')
        
        counts = {key: 0 for key in api_list}
        for i in api_list:
            for j in lines:
                if bytes(i, 'utf-8') in j:
                    counts[i] = counts.get(i, 0) + 1
        return counts.values()
                
        
    def asm_misc(self):
        """Retrieve the frequency of 95 manually chosen keywords used in 
        malicious files in list form.
        
        Each element of the list is related to different trends in malware
        files. For example, 'dll' is used to show the number of imported dll's
        """
        
        
        misc_list = ["Virtual", "Offset", "loc", "Import", "Imports", "var", 
                     "Forwarder", "UINT", "LONG", "BOOL", "WORD", "BYTES", 
                     "large", "short", "dd", "db", "dw", "XREF", "ptr", "DATA",
                     "FUNCTION", "extrn", "byte", "word", "dword", "char", 
                     "DWORD", "stdcall", "arg", "locret", "asc", "align", 
                     "WinMain", "unk", "cookie", "off", "nullsub", 
                     "DllEntryPoint", "System32", "dll", "CHUNK", "BASS", 
                     "HMENU", "DLL", "LPWSTR", "void", "HRESULT", "HDC", 
                     "LRESULT", "HANDLE", "HWND", "LPSTR", "int", "HLOCAL", 
                     "FARPROC", "ATOM", "HMODULE", "WPARAM", "HGLOBAL", 
                     "entry", "rva", "COLLAPSED", "config", "exe", "Software", 
                     "CurrentVersion", "__imp_", "INT_PTR", "UINT_PTR", 
                     "---Seperator", "PCCTL_CONTEXT", "__IMPORT_", 
                     "INTERNET_STATUS_CALLBACK", ".rdata:", ".data:", ".text:",
                     "case", "installdir", "market", "microsoft", "policies", 
                     "proc", "scrollwindow", "search", "trap", "visualc", 
                     "___security_cookie", "assume", "callvirtualalloc", 
                     "exportedentry", "hardware", "hkey_current_user", 
                     "hkey_local_machine", "sp-analysisfailed", "unableto"]
        
        lines = self._hex_contents.split(b'\n')
        
        counts = {key: 0 for key in misc_list}
        for i in misc_list:
            for j in lines:
                if bytes(i, 'utf-8') in j:
                    counts[i] = counts.get(i, 0) + 1
        return counts.values()
        
    def hex_bytes(self):
        """Return a list of all bytes contained in the hex file for the sample.
        
        The first time this functions is called, the bytes are parsed from the
        file and cached. Subsequent calls simply return the cache.
        
        NOTE: The ?? bytes are not filtered in this function.
        """
        
        # Parse the hex bytes from the file if they have not been parsed yet.
        if not hasattr(self, '_hex_bytes'):
            
            # Every two hex digits represents a single byte.
            contents = ''.join(self._hex_contents.split())
            self._hex_bytes = [contents[i:i+2] for i 
                               in range(0, len(contents), 2)]
                    
        return self._hex_bytes
        
    def hex_entropies(self, window_size=10000):
        """Calculate the entropy values for each of the windows in the hex
        file if the window has the specified size.
        
        A list of all of the entropy values calculated for each window will
        be returned.
        """
        
        hex_bytes = self.hex_bytes()
        
        # Ensure there are enough bytes for at least one window.
        if (len(hex_bytes) < window_size):
            raise ValueError(('The window size {0} exceeds the number ' +
                             'of bytes in the file: {1}')
                             .format(window_size, len(hex_bytes)))
                             
        # Retrieve the byte counts for the first window.
        window = hex_bytes[:window_size]
        
        byte_counts = dict()
        for byte in window:
            byte_counts[byte] = byte_counts.get(byte, 0) + 1
        
        # Calculate the entropy for the first window.
        entropies = [ entropy(byte_counts.values(), window_size) ]
        
        # Add the entropy values for the rest of the windows.
        for i in range(1, len(hex_bytes) - window_size):
            
            # Adjust the window count by removing from the count of the byte
            # that just got removed and adding to the count of the byte that
            # just got added.
            removed_byte = hex_bytes[i - 1]
            if (byte_counts.get(removed_byte, 0) != 0):
                byte_counts[removed_byte] -= 1
            
            added_byte = hex_bytes[i + window_size]
            byte_counts[added_byte] = byte_counts.get(added_byte, 0) + 1
            
            # Calculate the entropy for the current window's count.
            entropies.append(entropy(byte_counts.values(), window_size))
        
        return entropies
        
    def hex_entropy_stats(self, window_size=10000):
        """Retrieves statistics for the entropy values collected from the
        hex file.
        
        The list of stats returned are in the following format:
        
            [ { mean }, { variance }, { standard deviation }, 
              { Percentiles 0 - 100 } ]
        """
        
        # Retrieve the list of entropy values.
        entropies = self.hex_entropies(window_size)
        
        # Calculate various statistics for the entropy values.
        stats = [
            np.mean(entropies),
            np.var(entropies),
            np.std(entropies),
        ]
        
        # Percentiles 0 - 100
        for i in range(101):
            stats.append(np.percentile(entropies, i))
            
        return stats
        
                
    def hex_features(self):
        """Return a feature vector containing all of the features retrieved 
        from the hex file of the sample.
        
        The format of the feature vector is as follows (the numbers in
        parenthesis indicate how many features are in each section):
        
        [ { 1-gram frequencies (256) }, { hex file metadata (2) }, 
          { hex file entropy (105) }, { string length distribution (116) } ]
        """
        
        features = []
        
        features += self.hex_one_gram_frequencies()
        features += self.hex_metadata_features()
        features += self.hex_entropy_stats()
        features += self.hex_entropies(len(self.hex_bytes()))
        features += self.hex_string_length_counts(4, 120)
        
        return features
        
    def hex_file_size(self):
        """Return the size of the hex dump file in bytes."""
        return getsize(self.hex_file_name)
        
    def hex_first_address(self):
        """Return the address of the first byte sequence in the sample's
        hex file.
        """
        
        # The first word in the hex file is the address of the first byte 
        # sequence.
        first_word = self._hex_contents.split()[0]
        
        # The address is a hexadecimal value. Convert it to decimal.
        return int(first_word, 16)
            
    def hex_metadata_features(self):
        """Return a feature vector containing metadata related features
        extracted from the sample's hex dump.
        
        The feature vector will have the following format:
        
        [ {file size (bytes)}, {1st byte sequence address (decimal)} ]
        """
        return [self.hex_file_size(), self.hex_first_address()]
        
    def hex_string_length_counts(self, min, max):
        """Return a list of counts for all of the string lengths in the range
        of min - max (inclusive) characters.
        """
        
        # Retrieve all of the bytes in the hex file.
        bytes = self.hex_bytes()
        
        # The first four bytes of every 20 bytes contains an address, which
        # should not be analyzed to find a string.
        bytes = [bytes[i] for i in range(len(bytes)) if i % 20 >= 4]
        
        # Conver the hex values to decimal values.
        # NOTE: The ?? bytes are useless. Filter them out.
        ascii_values = [int(byte, 16) for byte in bytes if byte != '??']
        
        # The printable range for ASCII characters is 32 - 127. Replace
        # anything outside those bounds with a null to be filtered out.
        characters = [chr(value) if 32 <= value <= 127 else '\0' for value 
                      in ascii_values]
                                              
        # Retrieve each string by splitting up sequences of characters by
        # null characters.
        strings = ''.join(characters)
        strings = strings.split('\0')
        
        # Retrieve the length of each string.
        string_lengths = [len(string) for string in strings]
        
        # Record the requested counts.
        return [string_lengths.count(i) for i in range(min, max+1)]
        
    def hex_one_gram_frequencies(self, *one_grams):
        """Return the list of frequencies in the hex file for every specified
        1-gram value.
        
        A 1-gram has 256 possible values (0 - 255). The list returned will
        contain integer values representing the number of times its respective
        1-gram appeared in the file.
        
        If no argument is specified, the frequencies of all 256 possible 
        1-grams are found. In this scenario, the 1-grams are in ascending 
        order, meaning that 0x00 is at index 0 and 0xFF is at index 255.
        """
        
        # Every two hex digits represents one byte, which represents a 1-gram.
        # Remove the whitespace in the file and retrieve all of the possible
        # 1-grams.
        file_one_grams = [int(byte, 16) for byte in self.hex_bytes() 
                          if byte != '??']

        if not one_grams:
            one_grams = range(256)
        
        # Find the frequency of every passed 1-gram.
        frequencies = []
        
        for one_gram in one_grams:
            # Make sure the 1-gram is an integer.
            if not isinstance(one_gram, int):
                raise TypeError('Passed value must be an integer')
            
            # Make sure the 1-gram is in the correct range.
            if not (0 <= one_gram <= 255):
                raise ValueError('The value %s is not in the range 0 - 255' 
                                 % one_gram)
        
            # Count the frequency.
            frequencies.append(file_one_grams.count(one_gram))
        
        # Return the frequency of the specified 1-gram in the file.
        return frequencies