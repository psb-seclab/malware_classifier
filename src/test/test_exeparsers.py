import unittest
from test import TestCase
from parsers import ExeHexSample
from parsers import ExeAsmSample

class ExeAsmTestCase(TestCase):
    """Base class for all test cases involving the Windows Executable
    Assembly view features.
    """
    
    def setUp(self):
        """Load the test assembly file and set the results directory.
        
        This is called before the test method is executed.
        """
                
        # Load test assembly file.
        self.sample = ExeAsmSample('test/Test Files/Exe Asm Parser/test.asm')
        
        # Set results directory.
        self.results_directory = 'test/Test Files/Exe Asm Parser/' \
                                 + 'Expected Results/'
                                 
class ExeHexTestCase(TestCase):
    """Base class for all test cases involving the Windows Executable
    Hex view features.
    """
    
    def setUp(self):
        """Load the test assembly file and set the results directory.
        
        This is called before the test method is executed.
        """
                
        # Load test assembly file.
        self.sample = ExeHexSample('test/Test Files/Exe Hex Parser/test.bytes')
        
        # Set results directory.
        self.results_directory = 'test/Test Files/Exe Hex Parser/' \
                                 + 'Expected Results/'
                                 
class TestExeAsmMetadata(ExeAsmTestCase):
    """Tests the metadata_features method."""
    
    def test_metadata_features(self):
        self.assertEqual(self.sample.metadata_features(),
                         self.results('metadata_features.txt'),
                         'Failed metadata features test.')
                         
class TestExeAsmOpcodes(ExeAsmTestCase):
    """Tests the registers_opcodes method."""
    
    def test_opcodes_features(self):
        self.assertEqual(self.sample.opcode_features(),
                         self.results('opcode_features.txt'),
                         'Failed opcode features test.')

class TestExeAsmRegisters(ExeAsmTestCase):
    """Tests the registers_features method."""
    
    def test_registers_features(self):
        self.assertEqual(self.sample.register_features(),
                         self.results('register_features.txt'),
                         'Failed register features test.')
                              
class TestExeAsmSymbols(ExeAsmTestCase):
    """Test the symbol features method."""
    
    def test_symbol_features(self):
        self.assertEqual(self.sample.symbol_features(), 
                         self.results('symbol_features.txt'), 
                         'Failed symbol feature test.')
        
class TestExeAsmSections(ExeAsmTestCase):
    """Test the section features method."""
    
    def test_section_features(self):
        self.assertEqual(self.sample.section_features(), 
                         self.results('section_features.txt'), 
                         'Failed section feature test.')
                         
class TestExeAsmDataDefine(ExeAsmTestCase):
    """Test the data define features method."""
    
    def test_data_define_features(self):
        self.assertEqual(self.sample.data_define_features(), 
                         self.results('datadefine_features.txt'), 
                         'Failed data define feature test.')
                         
class TestExeHexEntropy(ExeHexTestCase):
    """Tests the entropies for the hex parser."""
    
    #@unittest.skip('Entropies test takes too long for now')
    def test_entropies(self):
        self.assertEqual(self.sample.entropies(50),
                         self.results('entropies.txt'),
                         'Failed entropies test.')
                         
class TestExeHexMetadata(ExeHexTestCase):
    """Tests the metadata features for the hex parser."""
    
    def test_metadata_features(self):
        self.assertEqual(self.sample.metadata_features(),
                         self.results('metadata_features.txt'),
                         'Failed metadata features test.')
                         
class TestExeHexOneGram(ExeHexTestCase):
    """Tests the 1-gram features for the hex parser."""

    def test_one_gram_features(self):
        self.assertEqual(self.sample.one_gram_features(),
                         self.results('1gram_features.txt'),
                         'Failed 1-gram features test.')
                         
class TestExeHexString(ExeHexTestCase):
    """Tests the string features for the hex parser."""
    
    @unittest.expectedFailure
    def test_string_features(self):
        self.assertEqual(self.sample.string_features(),
                         self.results('metadata_features.txt'),
                         'Failed metadata features test.')

if __name__ == '__main__':
    unittest().main()