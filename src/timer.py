from parsers import *
from time import clock
from os import system

def time(function, *args):
    """Time how long it takes to run the sepcified function.
    
    Any arguments that need to be passed to the function should be specified
    using the args parameter.
    
    Returns the number of seconds the function took to execute.
    """
    
    start = clock()
    function(*args)
    end = clock()
    
    return end - start
    
# Test each method for a sample.
hex_sample = ExeHexSample('0A32eTdBKayjCWhZqDOQ.bytes')

print('---------------Hex---------------\n')

one_gram_time = time(hex_sample.one_gram_features)
print('1-Grams:    %f seconds' % one_gram_time)

metadata_time = time(hex_sample.metadata_features)
print('Metadata:   %f seconds' % metadata_time)

entropy_time = time(hex_sample.entropy_features)
print('Entropy:    %f seconds' % entropy_time)

image_time = time(hex_sample.image_features)
print('Image:      %f seconds' % image_time)

string_time = time(hex_sample.string_features)
print('String:     %f seconds' % string_time)

hex_time = sum([one_gram_time, metadata_time, entropy_time, image_time, 
                string_time])
print('\nTotal:      %f seconds' % hex_time)

print('\n---------------------------------\n')

asm_sample = ExeAsmSample('0A32eTdBKayjCWhZqDOQ.asm')

print('---------------Asm---------------\n')

metadata_time = time(asm_sample.metadata_features)
print('Metadata:   %f seconds' % metadata_time)

symbol_time = time(asm_sample.symbol_features)
print('Symbol:     %f seconds' % symbol_time)

opcode_time = time(asm_sample.opcode_features)
print('Opcode:     %f seconds' % opcode_time)

register_time = time(asm_sample.register_features)
print('Register:   %f seconds' % register_time)

api_time = time(asm_sample.api_features)
print('API:        %f seconds' % api_time)

section_time = time(asm_sample.section_features)
print('Section:    %f seconds' % section_time)

dp_time = time(asm_sample.data_define_features)
print('DP:         %f seconds' % dp_time)

misc_time = time(asm_sample.misc_features)
print('Misc:       %f seconds' % misc_time)

asm_time = sum([metadata_time, symbol_time, opcode_time, register_time,
                api_time, section_time, dp_time, misc_time])
print('\nTotal:      %f seconds' % asm_time)

print('\n---------------------------------\n')

total_time = hex_time + asm_time
print('Total:      %f seconds\n' % total_time)

system('pause')

print('\n\n')

hex_sample = ExeHexSample('0A32eTdBKayjCWhZqDOQ.bytes')

print('---------------Hex---------------\n')

hex_time = time(hex_sample.features)
print('All:       %f seconds' % hex_time)

print('\n---------------------------------\n')

asm_sample = ExeAsmSample('0A32eTdBKayjCWhZqDOQ.asm')

print('---------------Asm---------------\n')

asm_time = time(asm_sample.features)
print('All:       %f seconds' % asm_time)

print('\n---------------------------------\n')

total_time = hex_time + asm_time
print('Total:      %f seconds' % total_time)