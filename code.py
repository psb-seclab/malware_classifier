import re 
#open file
#read files

#by line
with open("0A32eTdBKayjCWhZqDOQ.asm", "rb") as acs:
    lines = acs.readlines()
    
#by line
with open("0A32eTdBKayjCWhZqDOQ.asm", "rb") as acs:
    lines1 = acs.readlines()

#full
with open("0A32eTdBKayjCWhZqDOQ.asm", "rb") as acs:
    content = acs.read()


#*****************************************************************************#
#features 2 of assembly views
#*****************************************************************************#


feature2 = []

#search file for -, +, *, [, ], ?, @
#stores into list
results2 = re.findall(b"\-|\+|\*|\]|\[|\?|\@",content)

#converts list to string
results2_1 = b",".join(results2)

#count for -
minusCount = len(re.findall(b"\-", results2_1))

#count for +
plusCount = len(re.findall(b"\+", results2_1))

#count *
multiCount = len(re.findall(b"\*", results2_1))

#count [
leftbCount = len(re.findall(b"\[", results2_1))

#count ]
rightbCount = len(re.findall(b"\]", results2_1))

#count ?
quesCount = len(re.findall(b"\?", results2_1))

#count @
atCount = len(re.findall(b"\@", results2_1))

#add to feature list 2
feature2.extend((minusCount, plusCount, multiCount, leftbCount, rightbCount, quesCount, atCount))

#print out statements for features 2
print(feature2)


#*****************************************************************************#
#features of 6 of assembly
#*****************************************************************************#


feature6 = []

#separate file by line


#loop though each line and search for section
#if section found, add 1 to section in dictionary
#section[0] total number of lines in .bss section
#section[1] total number of lines in .data section
#section[2] total number of lines in .edata section
#section[3] total number of lines in .idata section
#section[4] total number of lines in .rdata section
#section[5] total number of lines in .rsrc section
#section[6] total number of lines in .text section
#section[7] total number of lines in .tls section
#section[8] total number of lines in .reloc section
sections = [0,0,0,0,0,0,0,0,0]
sectionUnk = set()
sectionsUnk = dict()
#number of unknown lines
unkLines = 0
#total lines
totalLines = 0
for section in lines:
    totalLines += 1
    if(re.search(b'\.bss', section) is not None):
        sections[0] += 1
    elif(re.search(b'\.data', section) is not None):
        sections[1] += 1
    elif(re.search(b'\.edata', section) is not None):
        sections[2] += 1
    elif(re.search(b'\.idata', section) is not None):
        sections[3] += 1
    elif(re.search(b'\.rdata', section) is not None):
        sections[4] += 1
    elif(re.search(b'\.rsrc', section) is not None):
        sections[5] += 1
    elif(re.search(b'\.text', section) is not None):
        sections[6] += 1
    elif(re.search(b'\.tls', section) is not None):
        sections[7] += 1
    elif(re.search(b'\.reloc', section) is not None):
        sections[8] += 1
    else:
        unkLines += 1
        print(section)
        #unknown    
        x = 0
        #gets the unknown section name from .to the before :
        #add the unknown section to a set, which only allows unique values
        sectionUnk.add(section.split(b':',1)[0])
        #loop through array and search for unknown sections
        while x != len(sectionUnk):
            #somehow
            tempStr = '\\' + str(sectionUnk[x])
            if(re.search(bytes(tempStr), section) is not None):
                sectionsUnk[x] = sectionsUnk.get(x,0) + 1
            x += 1

        
#total number of sections
numSection = len(sections) + len(sectionsUnk)

#total number of unknown sections
unkSection = len(sectionsUnk)

#total number of lines in unknown sections
#unkLines


#proportion of unknown sections to the all sections
unkSecProp = unkSection/numSection

#proportion of known sections to the all section
knownSecProp = 1 - unkSecProp

#The proportion of the amount of unknown sections to the whole file
unkProp = unkLines/totalLines

#proportion of .bss section to the whole file
bssProp = sections[0]/totalLines

#proportion of .data section to the whole file
dataProp = sections[1]/totalLines

#proportion of .edata section to the whole file
edataProp = sections[2]/totalLines

#proportion of .idata section to the whole file
idataProp = sections[3]/totalLines

#proportion of .rdata section to the whole file
rdataProp = sections[4]/totalLines

#proportion of .rsrc section to the whole file
rsrcProp = sections[5]/totalLines

#proportion of .text section to the whole file
textProp = sections[6] /totalLines

#proportion of .tls section to the whole file
tlsProp = sections[7]/totalLines

#proportion of .reloc section to the whole file
relocProp = sections[8]/totalLines
        
#add to feature list 6
feature6.extend((sections[0], sections[1], sections[2], sections[3], sections[4], sections[5], sections[6], sections[7], sections[8]))
feature6.extend((numSection, unkSection, unkLines, knownSecProp, unkSecProp, unkProp,))        
feature6.extend((bssProp, dataProp, edataProp, idataProp, rdataProp, rsrcProp, textProp, tlsProp, relocProp))        
        
#print out statements for features 6
print(feature6)


#*****************************************************************************#
#features 7 of assembly
#*****************************************************************************#


feature7 = []

#search for db, dd, dw 
#stores into list
results7 = re.findall(br'\bdb\b|\bdd\b|\bdw\b', content)

#total count of instructions

#total count for db, dd, and dw
dbdddwTotal = len(results7)

#converts list to string
results7_1 = b",".join(results7)

#count for db
dbCount = len(re.findall(br'\bdb\b', results7_1))

#count for dd
ddCount = len(re.findall(br'\bdd\b', results7_1))

#count for dw
dwCount = len(re.findall(br'\bdw\b', results7_1))

#count of db with 0 parameter whole files
db0w = 0
#count of db with not 0 parameter whole file
dbNotw = 0
#count of db in text section
dbtext = 0
#count of dd in text section
ddtext = 0
#count of count of dd in rdata section
ddrdata = 0
#count of db with 1 non 0 parameter in rdata section
db10rdata = 0
#count of db with 1 non 0 parameter in data section
db10data = 0
#count of db with 1 non 0 parameter in idata section
db10idata = 0
#count of db with 1 non 0 parameter in unknown section
db10Unk = 0
#count of db with 1 non 0 parameter whole file
db10w = 0
#count of dd with 4 parameters
dd4 = 0
#count of dd with 5 parameters
dd5 = 0
#count of dd with 6 parameters
dd6 = 0
#count of dd with 4 parameters in unknown section
dd4Unk = 0
#count of dd with 5 parameters in unknown section
dd5Unk = 0
#count of dd with 6 parameters in unknown section
dd6Unk = 0
#count of dd with 4 parameters whole file
dd4w = 0
#count of dd with 5 parameters whole file
dd5w = 0
#count of dd with 6 parameters whole file
dd6w = 0

#loop through each line search for db, dd, dw and get parameters
for instruct in lines1:
    #db parameters
    if(re.search(b' db ', instruct) is not None):
        temp = re.sub(b' +',b' ',instruct).split(b' ')
        dbP = temp.index(b'db') + 1
        if(temp[dbP] == b'0\r\n'):
            db0w += 1
        else:
            db10w += 1
            if(re.search(b'\.rdata', instruct) is not None):
                db10rdata += 1
            elif(re.search(b'\.data', instruct) is not None):
                db10data += 1
            elif(re.search(b'\.idata', instruct) is not None):
                db10idata += 1
            elif(re.search(b'\.bss|\.edata|\.rsrc|\.tls|\.reloc', instruct) is None):
                db10Unk += 1
        if(re.search(b'\.text', instruct) is not None):
            dbtext += 1
    if(re.search(b' dd ', instruct) is not None):
        temp1 = instruct.split(b',')
        if(len(temp1) == 4):
            dd4 += 1
        if(len(temp1) == 5):
            dd5 += 1
        if(len(temp1) == 6):
            dd6 += 1
        if(re.search(b'\.text', instruct) is not None):
            ddtext += 1
        elif(re.search(b'\.rdata', instruct) is not None):
            ddrdata += 1
        elif(re.search(b'\.bss|\.edata|\.rsrc|\.tls|\.reloc|\.idata', instruct) is None):
            if(len(temp1) == 4):
                dd4Unk += 1
            if(len(temp1) == 5):
                dd5Unk += 1
            if(len(temp1) == 6):
                dd6Unk += 1
                
dd4w = dd4 + dd4Unk
dd5w = dd5 + dd5Unk
dd6w = dd6 + dd6Unk
dbCount - db10w / dbCount

#proportion of db instructions in the whole file
dbwProportion = dbCount / totalLines

#proportion of dd instruction in the whole file
ddwProportion = ddCount / totalLines

#proportion of dw instruction in the whole file
dwwProportion = dwCount / totalLines

#proportion of all db, dd, and dw instructions in the whole file
allProportion = (dbCount + ddCount + dwCount) / totalLines

#proportion of db instruction with 0 parameter in the whole file
db0wProportion = db0w / totalLines

#proportion of db instruction with not 0 parameter in the whole file
dbNotwProportion = dbCount - db10w / dbCount

#proportion of dd instruction in the text section
ddtextProportion = ddtext / sections[6] if sections[6] > 0 else 0

#proportion of db instruction in the text section
dbtextProportion = dbtext / sections[6] if sections[6] > 0 else 0

#proportion of dd instruction in the rdata section
ddrdataProportion = ddrdata / sections[4] if sections[4] > 0 else 0

#proportion of db instruction with 1 non 0 parameter in the rdata section
db10rdataProportion = db10rdata / sections[4] if sections[4] > 0 else 0

#proportion of db instruction with 1 non 0 parameter in the data section
db10dataProportion = db10data / sections[6] if sections[6] > 0 else 0

#proportion of db instruction with 1 non 0 parameter in the idata section
db10idataProportion = db10idata / sections[3] if sections[3] > 0 else 0

#proportion of db instruction with 1 non 0 parameter in unknown sections
db10UnkProportion = db10rdata / unkLines  if unkLines > 0 else 0

#proportion of db instruction with 1 non 0 parameter in the whole file
db10wProportion = db10w / totalLines

#proportion of dd instruction with 4 parameters
#dd4

#proportion of dd instruction with 5 parameters
#dd5

#proportion of dd instruction with 6 parameters
#dd6

#proportion of dd instruction with 4 parameters in the whole file
dd4wProportion = dd4w / totalLines

#proportion of dd instruction with 5 parameters in the whole file
dd5wProportion = dd5w / totalLines

#proportion of dd instruction with 6 parameters in the whole file
dd6wProportion = dd6w / totalLines

#proportion of dd instruction with 4 parameters in unknown sections
dd4UnkProportion = dd4Unk / unkLines if unkLines > 0 else 0

#proportion of dd instruction with 5 parameters in unknown sections
dd5UnkProportion = dd5Unk / unkLines if unkLines > 0 else 0

#proportion of dd instruction with 6 parameters in unknown sections
dd6UnkProportion = dd6Unk / unkLines if unkLines > 0 else 0

#proportion of db instruction with 0 parameter to db instruction with non 0 parameter
dd0NotProportion = db0w / totalLines

#add to feature list 7
feature7.extend((dbwProportion, ddwProportion, dwwProportion, allProportion, db0wProportion, dbNotwProportion))
feature7.extend((ddtextProportion, dbtextProportion, ddrdataProportion, db10rdataProportion, db10dataProportion, db10idataProportion, db10UnkProportion, db10wProportion))
feature7.extend((dd4, dd5, dd6, dd4wProportion, dd5wProportion, dd6wProportion, dd4UnkProportion, dd5UnkProportion, dd6UnkProportion , dd0NotProportion))

#print out statements for features 7
print(feature7)