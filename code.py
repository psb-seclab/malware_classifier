import re 
#open file
with open("0A32eTdBKayjCWhZqDOQ.asm", "rb") as acs:
    lines = acs.readlines()
    
#read file
with open("0A32eTdBKayjCWhZqDOQ.asm", "rb") as acs:
    lines = acs.readlines()

acs = open("0A32eTdBKayjCWhZqDOQ.asm", "rb")
content = acs.read()


#features 2 of assembly views
feature2 = []

#search file for -, +, *, [, ], ?, @
#stores into list
results2 = re.findall(b"\-|\+|\*|\]|\[|\?|\@",content)

#converts list to string
results2_1 = b",".join(results2)

#count for -
minusCount = len(re.findall(b"\-", results2_1))

#count for +
plusCount = len(re.findall(b"\+", results2_1))

#count *
multiCount = len(re.findall(b"\*", results2_1))

#count [
leftbCount = len(re.findall(b"\[", results2_1))

#count ]
rightbCount = len(re.findall(b"\]", results2_1))

#count ?
quesCount = len(re.findall(b"\?", results2_1))

#count @
atCount = len(re.findall(b"\@", results2_1))

#add to feature list 2
feature2.extend((minusCount, plusCount, multiCount, leftbCount, rightbCount, quesCount, atCount))

#print out statements for features 2
print(feature2)



#features of 6 of assembly
feature6 = []

#separate file by line


#loop though each line and search for section
#if section found, add 1 to section in dictionary
#section[0] total number of lines in .bss section
#section[1] total number of lines in .data section
#section[2] total number of lines in .edata section
#section[3] total number of lines in .idata section
#section[4] total number of lines in .rdata section
#section[5] total number of lines in .rsrc section
#section[6] total number of lines in .text section
#section[7] total number of lines in .tls section
#section[8] total number of lines in .reloc section
sections = [0,0,0,0,0,0,0,0,0]
sectionUnk = set()
sectionsUnk = dict()
#number of unknown lines
unkLines = 0
#total lines
totalLines = 0
for section in lines:
    totalLines += 1
    if(re.search(b'\.bss', section) is not None):
        sections[0] += 1
    elif(re.search(b'\.data', section) is not None):
        sections[1] += 1
    elif(re.search(b'\.edata', section) is not None):
        sections[2] += 1
    elif(re.search(b'\.idata', section) is not None):
        sections[3] += 1
    elif(re.search(b'\.rdata', section) is not None):
        sections[4] += 1
    elif(re.search(b'\.rsrc', section) is not None):
        sections[5] += 1
    elif(re.search(b'\.text', section) is not None):
        sections[6] += 1
    elif(re.search(b'\.tls', section) is not None):
        sections[7] += 1
    elif(re.search(b'\.reloc', section) is not None):
        sections[8] += 1
    else:
        unkLines += 1
        print(section)
        #unknown    
        x = 0
        #gets the unknown section name from .to the before :
        #add the unknown section to a set, which only allows unique values
        sectionUnk.add(section.split(b':',1)[0])
        #loop through array and search for unknown sections
        while x != len(sectionUnk):
            #somehow
            tempStr = '\\' + str(sectionUnk[x])
            if(re.search(bytes(tempStr), section) is not None):
                sectionsUnk[x] = sectionsUnk.get(x,0) + 1
            x += 1

        
#total number of sections
numSection = len(sections) + len(sectionsUnk)

#total number of unknown sections
unkSection = len(sectionsUnk)

#total number of lines in unknown sections
#unkLines


#proportion of unknown sections to the all sections
unkSecProp = unkSection/numSection

#proportion of known sections to the all section
knownSecProp = 1 - unkSecProp

#The proportion of the amount of unknown sections to the whole file
unkProp = unkLines/totalLines

#proportion of .bss section to the whole file
bssProp = sections[0]/totalLines

#proportion of .data section to the whole file
dataProp = sections[1]/totalLines

#proportion of .edata section to the whole file
edataProp = sections[2]/totalLines

#proportion of .idata section to the whole file
idataProp = sections[3]/totalLines

#proportion of .rdata section to the whole file
rdataProp = sections[4]/totalLines

#proportion of .rsrc section to the whole file
rsrcProp = sections[5]/totalLines

#proportion of .text section to the whole file
textProp = sections[6] /totalLines

#proportion of .tls section to the whole file
tlsProp = sections[7]/totalLines

#proportion of .reloc section to the whole file
relocProp = sections[8]/totalLines
        
#add to feature list 6
        
print(sections)        
        
#print out statements for features 6
print(feature6)


#features 7 of assembly


#search for db, dd, dw 
#stores into list
results7 = re.findall(br'\bdb\b|\bdd\b|\bdw\b', content)

#total count of instructions

#total count for db, dd, and dw
dbdddwTotal = len(results7)

#converts list to string
results7_1 = b",".join(results7)

#count for db
dbCount = len(re.findall(br'\bdb\b', results7_1))

#count for dd
ddCount = len(re.findall(br'\bdd\b', results7_1))

#count for dw
dwCount = len(re.findall(br'\bdw\b', results7_1))

#

#print out statements for features 7
"""
print('count of db : ' + str(dbCount))
print('count of dd : ' + str(ddCount))
print('count of dw : ' + str(dwCount))
"""