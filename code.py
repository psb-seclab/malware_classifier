import re 
#open file
acs = open("0A32eTdBKayjCWhZqDOQ.asm", "rb")

#read file    
content = acs.read()


#features 2 of assembly views


#search file for -, +, *, [, ], ?, @
#stores into list
results2 = re.findall(b"\-|\+|\*|\]|\[|\?|\@",content)

#converts list to string
results2_1 = b",".join(results2)

#count for -
minusCount = len(re.findall(b"\-", results2_1))

#count for +
plusCount = len(re.findall(b"\+", results2_1))

#count *
multiCount = len(re.findall(b"\*", results2_1))

#count [
leftbCount = len(re.findall(b"\[", results2_1))

#count ]
rightbCount = len(re.findall(b"\]", results2_1))

#count ?
quesCount = len(re.findall(b"\?", results2_1))

#count @
atCount = len(re.findall(b"\@", results2_1))

#print out statements for features 2
"""
print('count of - : ' + str(minusCount))
print('count of + : ' + str(plusCount))
print('count of * : ' + str(multiCount))
print('count of [ : ' + str(leftbCount))
print('count of ] : ' + str(rightbCount))
print('count of ? : ' + str(quesCount))
print('count of @ : ' + str(atCount))
"""


#features of 6 of assembly


#separate file by line
lines = content.split()

#loop though each line and search for section
#if section found, add 1 to section in dictionary
#section[0] total number of lines in .bss section
#section[1] total number of lines in .data section
#section[2] total number of lines in .edata section
#section[3] total number of lines in .idata section
#section[4] total number of lines in .rdata section
#section[5] total number of lines in .rsrc section
#section[6] total number of lines in .text section
#section[7] total number of lines in .tls section
#section[8] total number of lines in .reloc section

#section[9] total number of unknown sections
sections = dict()
sectionUnk = set()
sectionsUnk = dict()
for section in lines:
    if(re.search(b'\.bss', section) is not None):
        sections[0] = sections.get(0,0) + 1
    elif(re.search(b'\.data', section) is not None):
        sections[1] = sections.get(1,0) + 1
    elif(re.search(b'\.edata', section) is not None):
        sections[2] = sections.get(2,0) + 1
    elif(re.search(b'\.idata', section) is not None):
        sections[3] = sections.get(3,0) + 1
    elif(re.search(b'\.rdata', section) is not None):
        sections[4] = sections.get(4,0) + 1
    elif(re.search(b'\.rsrc', section) is not None):
        sections[5] = sections.get(5,0) + 1
    elif(re.search(b'\.text', section) is not None):
        sections[6] = sections.get(6,0) + 1
    elif(re.search(b'\.tls', section) is not None):
        sections[7] = sections.get(7,0) + 1
    elif(re.search(b'\.reloc', section) is not None):
        sections[8] = sections.get(8,0) + 1
    else:
        #unknown
        #gets the unknown section name from .to the before :
        #add the unknown section to a set, which only allows unique values
        x = 0
        sectionUnk.add(section.split(':',1)[0])
        #search for unknown sections
        while x != len(sectionUnk):
            #somehow
            tempStr =  
            if(re.search(b'\ '+ set[x], section) is not None):
                sectionsUnk[x] = sectionsUnk.get(x,0) + 1
            x += 1

#total number of sections
numSection = len(sections)

#total number of unknown sections
unkSection = sections[9]

#total number of lines in unknown sections

#proportion of known sections to the all section

#proportion of unknown sections to the all sections

#The proportion of the amount of unknown sections to the whole file

#proportion of .text section to the whole file

#proportion of .data section to the whole file

#proportion of .bss section to the whole file

#proportion of .rdata section to the whole file

#proportion of .edata section to the whole file

#proportion of .idata section to the whole file

#proportion of .rsrc section to the whole file

#proportion of .tls section to the whole file

#proportion of .reloc section to the whole file
        
#print out statements for features 6
#"""
print('number of sections : ' + str(numSection))
print(sections)
#"""


#features 7 of assembly


#search for db, dd, dw 
#stores into list
results7 = re.findall(br'\bdb\b|\bdd\b|\bdw\b', content)

#total count for db, dd, and dw
dbdddwTotal = len(results7)

#converts list to string
results7_1 = b",".join(results7)

#count for db
dbCount = len(re.findall(br'\bdb\b', results7_1))

#count for dd
ddCount = len(re.findall(br'\bdd\b', results7_1))

#count for dw
dwCount = len(re.findall(br'\bdw\b', results7_1))

#print out statements for features 7
"""
print('count of db : ' + str(dbCount))
print('count of dd : ' + str(ddCount))
print('count of dw : ' + str(dwCount))
"""